stack--> ordered, fixed datasize, "plate stack"
heap--> find space, return pointer --> allocating on the heap --> allocating

pointer to heap is down fixed size to can be store in the stack.

pushing to stack --> faster
allocating to heap --> slower
(hence why immut is standard?) 

owner out of scope --> value dropped

?? primitive datatypes --> fixed size --> stack? 

string literal != String
let s = String::from("hello"); //converts from string literal to String

string literal --> immut, hardcoded at compile, fast & efficient

let s1 = String::from("Hello");
let s2 = s1; //drops s1 pointer to "Hello" as to avoid future "double free error"  
  //let s2 = s1; --> called a "move"
print("{}", s1}; //will return error as pointer no longer exist.

??only with heap/complex data types?
  tested in copy-and-move --> is true

let s1 = String::from("Hello");
let s2 = s1.clone(); //clones value - memory heavy, but preserves s1

general rule: any group of simple scalar valyes can impliment Copy. Examples:
-int, such as u32, i32(?)
-bool
-float, such as f64
-char
-tuples that only contain types that allow Copy
--ok: (i32, i32), (i32, u32)(?)
--not ok (i32, String)

super useful example pulled from the page-->
https://github.com/hellmak/learning-rust/blob/main/doc.rust-lang.org/book/ch04-01-what-is-ownership.html/useful-example-code/ownership-and-functions01.rs

&ref
*deref

"Mutable references have one big restriction: 
  if you have a mutable reference to a value, you can have no other references to that value. 
"

    let r1 = &s; // no problem
    let r2 = &s; // no problem
    let r3 = &mut s; // BIG PROBLEM
    
    let r1 = &s; // no problem
    let r2 = &s; // no problem
    println!("{} and {}", r1, r2);
    // variables r1 and r2 will not be used after this point

    let r3 = &mut s; // no problem
    println!("{}", r3);
