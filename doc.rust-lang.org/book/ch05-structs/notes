a struct is like an object’s data attribute in Object Oriented languages.

Note that the entire instance must be mutable; Rust doesn’t allow us to mark only certain fields as mutable. 
  As with any expression, we can construct a new instance of the struct as the last expression in the function body
  to implicitly return that new instance.

Read up more on string literal (&str) vs String

fn first_word(s: &str)    -> &str { // can take but String and &str values
fn first_word(s: String)  -> &str { // can not take &str (?)
-------
&str vs String:
In Rust, a "string literal" and a "String" are two different ways of representing text. Here's a simple explanation of their differences:

    String Literal:

    A sequence of characters enclosed in double quotes, like "Hello, world!"
    They are of type &str (pronounced "string slice").
    Stored in the program's memory as a fixed-size, read-only chunk of text.
    Fast and efficient, but cannot be modified or resized.

    String:

    A more flexible representation of text, using the String type.
    Can be created, modified, and resized at runtime.
    Stored on the heap, which allows for dynamic memory allocation and deallocation.
    Uses more memory and processing power compared to string literals.

In summary, use string literals (&str) for fixed, read-only text, and String for text that needs to be changed or resized during program execution.
-------

is &str string literal or string slice?

"[...] string literals *are* string slices already" ~Rust Doc

-------
a non string slice:
let a = [1, 2, 3, 4, 5];

let slice = &a[1..3];

assert_eq!(slice, &[2, 3]);

---------

//FIXME: seem to have taken notes from tryibg to understand last chapter here as well

Major connectivity problems today :/

------

field init shorthand:
fn build_user(email: String, username: String) -> User {
    User {
        active: true,
        username,
        email,
        sign_in_count: 1,
    }
}

struct update syntax:
fn main() {
    // --snip--

    let user2 = User {
        email: String::from("another@example.com"),
        ..user1 // takes non defined values from user1 (copies?)
    };
}

---------
//vars, descriptive but messy
    let width1 = 30;
    let height1 = 50;
    
//tuple, structured but non-descriptive
    let rect1 = (30, 50);
    
//struct, structured and descriptive
  struct Rectangle {
      width: u32,
      height: u32,
  }
------------
